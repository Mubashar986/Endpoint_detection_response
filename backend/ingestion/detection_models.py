"""
detection_models.py

MongoDB models for rule-based threat detection.

Models:
  - DetectionRule: Detection rule definitions
  - Alert: Security alerts generated by rules

Why separate file:
  - Keeps detection logic separate from telemetry
  - Clean imports and organization
"""

from mongoengine import (
    Document, 
    StringField, 
    DateTimeField, 
    DictField, 
    ListField, 
    IntField, 
    FloatField,
    BooleanField
)
from datetime import datetime, timezone


class DetectionRule(Document):
    """
    Detection rule for identifying known attack techniques.
    
    Each rule defines:
      - What to look for (detection logic)
      - How severe it is (severity, MITRE mapping)
      - What to ignore (exceptions for false positives)
    """
    
    # ========== IDENTITY ==========
    rule_id = StringField(required=True, unique=True)
    # Example: "RULE-T1059-001"
    
    name = StringField(required=True, max_length=255)
    # Example: "Suspicious PowerShell Execution"
    
    description = StringField(required=True)
    # Detailed explanation of what this rule detects
    
    # ========== STATUS ==========
    enabled = BooleanField(default=True)
    # Is this rule actively evaluating events?
    
    deployment_status = StringField(
        default="DRAFT",
        choices=["DRAFT", "TESTING", "PRODUCTION", "DEPRECATED"]
    )
    
    # ========== CLASSIFICATION ==========
    severity = StringField(
        required=True,
        choices=["CRITICAL", "HIGH", "MEDIUM", "LOW"]
    )
    
    confidence = FloatField(default=1.0)
    # How confident are we this is malicious? (0.0 - 1.0)
    
    # ========== MITRE ATT&CK MAPPING ==========
    mitre_tactics = ListField(StringField(), default=list)
    # Example: ["TA0002"] = Execution
    
    mitre_techniques = ListField(StringField(), default=list)
    # Example: ["T1059.001"] = PowerShell
    
    mitre_tactic_names = ListField(StringField(), default=list)
    # Example: ["Execution"]
    
    mitre_technique_names = ListField(StringField(), default=list)
    # Example: ["PowerShell"]
    
    tags = ListField(StringField(), default=list)
    # Example: ["execution", "powershell", "command-line"]
    
    # ========== DETECTION LOGIC ==========
    detection_logic = DictField(required=True)
    # Structure:
    # {
    #   "entity_type": "process",
    #   "conditions": [
    #     {"field": "process.name", "operator": "equals", "value": "powershell.exe"},
    #     {"field": "process.command_line", "operator": "contains", "value": "-enc"}
    #   ],
    #   "logic": "AND"
    # }
    
    exceptions = ListField(DictField(), default=list)
    # False positive filters
    # Structure same as conditions
    
    # ========== RESPONSE ==========
    generate_alert = BooleanField(default=True)
    automated_actions = ListField(DictField(), default=list)
    
    # ========== METADATA ==========
    author = StringField(required=True)
    data_sources = ListField(StringField(), default=list)
    references = ListField(StringField(), default=list)
    
    # ========== STATISTICS ==========
    alert_count_7d = IntField(default=0)
    alert_count_30d = IntField(default=0)
    false_positive_rate = FloatField(default=0.0)
    true_positive_rate = FloatField(default=0.0)
    avg_response_time_minutes = FloatField(default=0.0)
    last_triggered = DateTimeField(null=True)
    
    # ========== AUDIT TRAIL ==========
    created_at = DateTimeField(default=lambda: datetime.now(timezone.utc))
    last_modified = DateTimeField(default=lambda: datetime.now(timezone.utc))
    last_modified_by = StringField()
    version = IntField(default=1)
    
    # ========== DEPLOYMENT ==========
    deployment_targets = StringField(default="ALL")
    effective_from = DateTimeField(null=True)
    effective_until = DateTimeField(null=True)
    
    # ========== MONGODB CONFIG ==========
    meta = {
        'collection': 'detection_rules',
        'indexes': [
            'rule_id',
            'enabled',
            ('enabled', 'detection_logic.entity_type'),
            'severity',
            'mitre_techniques',
            'tags',
            'deployment_status'
        ]
    }
    
    def __str__(self):
        return f"{self.rule_id}: {self.name}"
    
    def save(self, *args, **kwargs):
        """Override save to update timestamps and version."""
        self.last_modified = datetime.now(timezone.utc)
        if self.version is None:
            self.version = 1
        else:
            self.version += 1
        super().save(*args, **kwargs)
    
    def is_active_for_endpoint(self, endpoint_id):
        """Check if rule applies to this endpoint."""
        if not self.enabled:
            return False
        
        if self.deployment_status != "PRODUCTION":
            return False
        
        now = datetime.now(timezone.utc)
        
        if self.effective_from and now < self.effective_from:
            return False
        
        if self.effective_until and now > self.effective_until:
            return False
        
        if self.deployment_targets == "ALL":
            return True
        
        return True
    
    def increment_alert_count(self):
        """Increment alert counters (called when alert created)."""
        self.alert_count_7d += 1
        self.alert_count_30d += 1
        self.last_triggered = datetime.now(timezone.utc)


class Alert(Document):
    """
    Security alert generated when detection rule matches event.
    
    Lifecycle:
      1. Created when rule matches (status: UNRESOLVED)
      2. Analyst investigates (status: INVESTIGATING)
      3. Analyst takes action (status: RESOLVED or FALSE_POSITIVE)
    """
    
    # ========== IDENTITY ==========
    alert_id = StringField(required=True, unique=True)
    # Example: "ALT-20241030-A3F2C1"
    
    # ========== SOURCE RULE ==========
    rule_id = StringField(required=True)
    # Which rule triggered this alert
    
    rule_name = StringField(required=True)
    # Human-readable rule name (denormalized for performance)
    
    # ========== CLASSIFICATION ==========
    severity = StringField(
        required=True,
        choices=["CRITICAL", "HIGH", "MEDIUM", "LOW"]
    )
    # Copied from rule at creation time
    
    confidence = FloatField(default=1.0)
    # How confident are we this is malicious? (0.0 - 1.0)
    
    # ========== STATUS ==========
    alert_status = StringField(
        required=True,
        default="UNRESOLVED",
        choices=["UNRESOLVED", "INVESTIGATING", "RESOLVED", "FALSE_POSITIVE"]
    )
    # UNRESOLVED: New alert, not yet reviewed
    # INVESTIGATING: Analyst actively working on it
    # RESOLVED: Confirmed malicious, remediated
    # FALSE_POSITIVE: Not actually malicious
    
    # ========== AFFECTED ENTITY ==========
    endpoint_id = StringField(required=True)
    # Which endpoint triggered this alert
    
    hostname = StringField(required=True)
    # Human-readable endpoint name
    
    # ========== MITRE ATT&CK ==========
    mitre_tactics = ListField(StringField(), default=list)
    mitre_techniques = ListField(StringField(), default=list)
    # Copied from rule for dashboard filtering
    
    # ========== EVIDENCE ==========
    matched_event_ids = ListField(StringField(), default=list)
    # References to TelemetryEvent documents
    # Usually just one, but can be multiple for correlation rules
    
    evidence_summary = DictField(default=dict)
    # Extracted key details for quick review
    # Example for process event:
    # {
    #   "process_name": "powershell.exe",
    #   "command_line": "powershell.exe -EncodedCommand...",
    #   "pid": 1234,
    #   "user": "DOMAIN\\user",
    #   "matched_indicators": ["-EncodedCommand", "DownloadString"]
    # }
    
    # ========== INVESTIGATION ==========
    assigned_analyst = StringField(null=True)
    # Email of analyst investigating this alert
    
    notes = ListField(DictField(), default=list)
    # Investigation notes
    # Structure:
    # [
    #   {
    #     "timestamp": ISODate,
    #     "analyst": "analyst@company.com",
    #     "note": "Investigating process tree..."
    #   }
    # ]
    
    # ========== RESPONSE ACTIONS ==========
    automated_actions = ListField(DictField(), default=list)
    # Actions taken automatically by system
    # Example: [{"action": "isolate_endpoint", "timestamp": "...", "result": "success"}]
    
    manual_actions = ListField(DictField(), default=list)
    # Actions taken manually by analyst
    # Example: [{"action": "killed_process", "analyst": "...", "timestamp": "..."}]
    
    # ========== TIMELINE ==========
    first_detected = DateTimeField(default=lambda: datetime.now(timezone.utc))
    # When alert was first created
    
    last_detected = DateTimeField(default=lambda: datetime.now(timezone.utc))
    # When alert was last updated (for recurring alerts)
    
    occurrence_count = IntField(default=1)
    # How many times this same alert has fired
    
    resolved_at = DateTimeField(null=True)
    # When alert was marked resolved/false positive
    
    # ========== TIMESTAMPS ==========
    created_at = DateTimeField(default=lambda: datetime.now(timezone.utc))
    updated_at = DateTimeField(default=lambda: datetime.now(timezone.utc))
    
    # ========== MONGODB CONFIG ==========
    meta = {
        'collection': 'alerts',
        'indexes': [
            'alert_id',
            'alert_status',
            'endpoint_id',
            'rule_id',
            'severity',
            '-first_detected',  # Descending (newest first)
            ('alert_status', '-first_detected'),  # Compound for dashboard
            'mitre_techniques'
        ]
    }
    
    def __str__(self):
        return f"{self.alert_id} - {self.severity} - {self.rule_name}"
    
    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
    
    # Update the rule's alert count
        if self.rule_id:
              from datetime import datetime, timedelta, timezone
        
        try:
            rule = DetectionRule.objects.get(rule_id=self.rule_id)
            
            # Count alerts from last 7 days
            seven_days_ago = datetime.now(timezone.utc) - timedelta(days=7)
            count_7d = Alert.objects.filter(
                rule_id=self.rule_id,
                first_detected__gte=seven_days_ago
            ).count()
            
            rule.alert_count_7d = count_7d
            rule.last_triggered = self.first_detected
            rule.save()
        except DetectionRule.DoesNotExist:
            pass
        
    def assign_to(self, analyst_email):
        """Assign alert to analyst."""
        self.assigned_analyst = analyst_email
        self.alert_status = "INVESTIGATING"
        self.save()
    
    def add_note(self, analyst_email, note_text):
        """Add investigation note."""
        note = {
            "timestamp": datetime.now(timezone.utc),
            "analyst": analyst_email,
            "note": note_text
        }
        self.notes.append(note)
        self.save()
    
    def mark_resolved(self, analyst_email, resolution_note=None):
        """Mark alert as resolved (malicious, remediated)."""
        self.alert_status = "RESOLVED"
        self.resolved_at = datetime.now(timezone.utc)
        
        if resolution_note:
            self.add_note(analyst_email, f"Resolved: {resolution_note}")
        
        self.save()
    
    def mark_false_positive(self, analyst_email, reason=None):
        """Mark alert as false positive."""
        self.alert_status = "FALSE_POSITIVE"
        self.resolved_at = datetime.now(timezone.utc)
        
        if reason:
            self.add_note(analyst_email, f"False Positive: {reason}")
        
        self.save()
        